---

- name: puertos usados por Kubernets Master 6443
  firewalld:
    port: 6443/tcp
    permanent: true
    state: enabled
  become: yes

- name: puertos usados por Kubernets Master 2379-2380 tcp
  firewalld:
    port: 2379-2380/tcp
    permanent: true
    state: enabled
  become: yes

- name: puertos Kubernets Master 10250-10252 tcp
  firewalld:
    port: 10250-10252/tcp
    permanent: true
    state: enabled
  become: yes

- name: puertos usados por Kubernets Master 10255 tcp
  firewalld:
    port: 10255/tcp
    permanent: true
    state: enabled
  become: yes
  
- name: acceso de los workers al master
  firewalld:
    rich_rule: "rule family=ipv4 source address={{ hostvars[item].ansible_host }}/32 accept"
    permanent: true
    state: enabled
  when: hostvars[item].ansible_host is defined
  with_items: "{{ groups.workers }}"
  become: yes

- name: Reinicia el servicio Firewalld 
  systemd:
    name: firewalld
    state: restarted
  become: yes

- name: Descargando imágenes Kubernetes
  shell: kubeadm config images pull
  become: yes
  
- debug:
    msg: "Se ejecutara: kubeadm init --apiserver-advertise-address {{ ansible_host }} --pod-network-cidr {{ pod_network }}"
    
- name: Instalar CNI y definimos la red
  shell: "kubeadm init --apiserver-advertise-address 10.0.2.10 --pod-network-cidr {{ pod_network }}"
  register: kubeadd_cmd
  become: yes

- name: salida de kubeadm init
  debug:
    msg: "{{ kubeadd_cmd.stdout_lines }}"
  
- name: Extrayendo el hash CRT CA del Master
  shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | sha256sum
  register: cert_out
  become: yes
  
- name: Hash CRT
  set_fact: 
    cert_hash: "{{ cert_out.stdout | regex_search('^[a-f0-9]{64}') }}"
  
- name: Mostramos el Hash CRT
  debug:
    msg: "{{ cert_hash }}"

- name: Extrayendo el token formato JSON
  shell: kubeadm token list -o json
  register: token_out
  become: yes
  
- name: Limpiando el Token
  set_fact: 
    token_hash: "{{ token_out.stdout | from_json | json_query('token') }}"
  
- name: Token extraido
  debug:
    msg: "{{ token_hash }}"
  
- name: directorio .kube
  file:
    path: /root/.kube
    state: directory
  become: yes

- name: Autorizando al usuario root
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes
    owner: root
    group: root
  become: yes

- name: Instalamos SDN Flannel
  shell: kubectl apply -f https://docs.projectcalico.org/manifests/canal.yaml
  register: kubectl_sdn
  become: yes
  when: sdn == 'flannel'

- name: Mostramos el resultado de la instalación de la SDN Flannel
  debug:
    msg: "{{ kubectl_sdn.stdout_lines }}"
  when: sdn == 'flannel'

- name: Instalamos Tigera
  shell: kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
  register: kubectl_operator
  become: yes
  when: sdn == 'calico'

- name: Copiando el custom resources de Calico
  copy:
    src: custom-resources.yaml
    dest: /root/custom-resources.yaml
    mode: '0644'
  become: yes
  when: sdn == 'calico'
  
- name: Instalamos SDN Calico
  shell: kubectl apply -f /root/custom-resources.yaml
  register: kubectl_sdn
  become: yes
  when: sdn == 'calico'

- name: resultado SDN Calico
  debug:
    msg: "{{ kubectl_sdn.stdout_lines }}"
  when: sdn == 'calico'
  
- name: Desplegar Ha proxy
  command: kubectl apply -f https://raw.githubusercontent.com/haproxytech/kubernetes-ingress/master/deploy/haproxy-ingress.yaml
  become: yes
  
- name: usuario kubeadmin
  user:
    name: kubeadmin
    password: '$6$s3cr3t.s4lt$j3SHtpVd9BgXbQQKpIGiD0nxZdswKkT/mmxmoeTl1I2XQp6Pq.kwfPBErvgOxpOswooWwi6SqmHEmS1T6FxcZ.' ## password='kubeadmin' encriptado
    comment: Usuario administrador de Kubernetes
    create_home: yes
    home: /home/kubeadmin
  become: yes

- name: Creamos el directorio kubeadmin
  file:
    path: /home/kubeadmin/.kube
    state: directory
  become: yes

- name: Autorizando al usuario kubeadmin acceder al cluster Kubernetes
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/kubeadmin/.kube/config
    remote_src: yes
    owner: kubeadmin
    group: kubeadmin
  become: yes

- name: kubeadmin permisos sudo
  lineinfile:
    dest: /etc/sudoers.d/kubeadmin
    state: present
    create: yes
    line: 'ALL   ALL = (ALL) NOPASSWD: ALL'
  become: yes
